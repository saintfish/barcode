package barcode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _digits_gif = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x97\x77\x5c\x53\xd9\xb6\xc7\xf7\x39\x27\xbd\x50\x92\x10\x01\x29\xa1\x37\xa9\x0a\x04\x10\x29\xa1\x45\x40\x8a\x48\x13\x95\x98\x04\x08\x25\x60\x48\x88\x62\x57\x44\x05\x46\x14\x15\x29\x56\x64\x54\x44\xc1\xd1\xa1\xc8\x28\x2a\xa2\x58\x10\x05\x15\xec\x13\x64\x10\xb0\x0d\x16\x54\x44\xcd\x3b\xd1\xcf\x67\xc6\xf7\xde\xbd\x77\x66\xee\xef\x0f\xce\x77\xaf\xb5\xf6\x66\xef\xb5\xd6\xc9\x67\x9f\x40\x6e\x00\xdb\x95\x17\x00\x48\x60\x0b\x50\x49\xa9\x54\x7e\x7d\x02\xa3\x71\x0c\x11\x00\x18\x18\x29\xc9\x5c\x0e\x27\x32\xd0\x37\xd0\xd1\xc1\xd1\x09\x75\x52\x82\x42\x44\xe2\x4c\x58\x03\x80\x0c\xb1\x54\x82\x3a\x58\xb1\x71\xf1\x2c\x7c\x17\x1a\x4b\x04\x38\xe0\x08\x00\x8f\x9f\x9d\x15\x3a\x3b\x20\x4a\xb5\x0c\xd7\x9f\xc3\xca\x46\x83\xc0\xff\xd2\xbb\x5e\x00\xa9\x9e\x37\x6d\x83\xc2\x59\x2c\xf0\xcf\xa4\xc9\xcf\x92\x48\x01\x80\xc2\x51\x9e\x2a\x10\x66\xf3\x51\xce\x43\x39\x5d\x2e\xcd\x52\xd9\x47\x51\x66\x2c\x4c\x53\x31\x8c\x51\xb1\x04\xdd\x20\xca\xda\x2a\x4e\xfe\xc6\x53\xbe\xc6\x7c\x63\x6f\x15\x0b\x32\xc4\x02\x94\x55\x7b\xce\x12\x64\x08\x54\xdc\x8e\xf2\x86\x1c\x99\x10\x65\x24\x04\xe5\xfc\x1c\x91\x50\x29\x47\x07\xb7\xd0\x81\x69\xba\x2c\x43\x84\xf2\x07\xd5\xe4\x0c\x21\x2f\x1b\x00\x0c\x45\x65\x97\x0a\xf9\x29\x28\x3b\xa0\x4c\x91\x44\x45\x72\x50\x9e\x0e\x00\x81\x92\xfc\x1d\x2f\xfc\x8e\xa5\xc2\xc5\x52\xd5\xa9\x38\x99\x59\x4b\x24\xa2\xe4\x14\x29\xcb\x92\x6f\xc5\x72\x74\x73\x63\xb3\x82\x84\xf2\x74\xa1\x54\x6a\x1b\xce\xe3\xa7\xf1\x24\x02\x16\x27\x33\x23\x8b\x27\x5e\x02\xc0\xb7\x43\x7f\x15\x4d\x95\x5c\x16\x9a\x65\x17\x47\x37\x17\x17\x5b\x27\x3b\xc7\xef\x32\xf5\x1f\x9d\x7f\x53\xaa\xe2\x7e\xa3\x37\x11\x00\x52\x35\x07\xc4\xec\xfc\xd3\xf8\xaf\x02\x33\xab\x00\x60\x8f\xa1\xc9\xd9\xfc\xa7\x6d\x61\x39\x00\x4d\xeb\x00\xd0\xbe\xf7\xa7\xcd\x74\x2f\x00\xea\x68\xe5\x1a\xaf\x7f\x77\x20\xa6\xaa\x63\x52\xa4\xd2\x2c\x77\x7b\x7b\xb9\x5c\x6e\x27\x12\xf2\xed\x54\x19\xfd\x43\x7f\x19\xf0\x37\xf4\xdd\xff\xb3\x53\x2d\xf7\x47\x7e\x58\x7e\xc2\x24\x9e\x2c\x5d\xca\x52\x25\x8e\x9f\x99\x9e\x29\x93\xb0\xb2\xb3\x78\x7c\x21\xcb\xf6\x6b\x1b\x2b\xbf\x5b\xe4\x9f\xcd\xfc\xcb\x8d\x4c\x89\x14\x26\x09\x25\x42\x31\x3a\x23\x5a\x24\x94\x8b\xc4\xc9\x68\xc1\xc5\x02\x91\x54\x94\x29\x66\x89\xc4\xff\xae\x8c\xff\xe5\xb4\xff\x23\xb4\xb5\xe5\x5f\x81\x5e\xfd\x05\x30\x16\xd8\x01\x8d\xeb\x0c\x80\xbc\xe8\x04\x18\x3a\x19\x20\x09\xbb\x51\x0f\xa4\x2a\xdc\xb7\xf3\x87\x10\xa3\x81\xea\xed\x8b\x31\x1c\xfa\xd6\xfa\x5f\x05\xfd\xff\x65\xe1\x62\xd5\x9f\x6c\x51\x32\x4b\x35\xe2\x44\x46\xb1\xf8\x32\x49\xce\x37\x9f\xea\xd5\x04\x58\xf4\x87\x47\x1d\x30\x80\x0e\x30\x00\x26\xc0\x12\xd8\x02\x27\xe0\x0a\x3c\x80\x37\xf0\x07\x33\x41\x18\x88\x02\x71\x60\x3e\xe0\x83\x14\x90\x01\x24\x40\x0e\x96\x81\xd5\x20\x1f\x14\x82\xcd\x60\x3b\xa8\x00\x7b\x40\x35\xa8\x01\x75\xe0\x38\x68\x02\xa7\xc0\x39\x70\x11\x5c\x05\x37\xc0\x6d\x70\x1f\x28\xc0\x20\x78\x06\x46\xc1\x3b\x30\x01\x41\x10\x1e\xa2\x42\x74\x48\x07\x32\x84\xcc\x20\x1b\xc8\x09\x62\x43\x33\x20\x7f\x28\x04\x8a\x84\xe2\xa0\x44\x28\x19\x12\x43\x32\x68\x19\xb4\x16\x2a\x84\x4a\xa0\x0a\x68\x1f\x54\x03\xfd\x04\x9d\x84\xce\x41\x97\xa1\x6e\xe8\x2e\xd4\x0f\x8d\x40\xaf\xa1\x8f\x30\x02\x53\x60\x25\x03\xd6\x87\xcd\x61\x7b\x98\x0d\xfb\xc0\xc1\x70\x14\x3c\x0f\x4e\x86\x17\xc1\xb9\x70\x1e\xbc\x09\x2e\x83\xab\xe0\x23\x70\x23\x7c\x0e\xbe\x0a\xdf\x86\x15\xf0\x33\x78\x0c\x01\x08\x19\x61\x22\x46\x88\x2d\xc2\x46\x38\x48\x18\x12\x8f\x24\x21\x12\x64\x05\x52\x80\x94\x22\x55\x48\x1d\xd2\x82\x74\x20\x37\x11\x05\xf2\x1c\x19\xc7\xe0\x30\x74\x0c\x0b\x63\x8b\xf1\xc0\x04\x61\xe6\x60\xf8\x98\x45\x98\x15\x98\x22\x4c\x05\xe6\x10\xa6\x11\xd3\x8e\xb9\x89\xe9\xc7\x8c\x62\xbe\x60\xa9\x58\x3d\xac\x0d\xd6\x1d\xcb\xc5\xc6\x62\x93\xb1\x72\x6c\x3e\xb6\x14\x7b\x00\xdb\x80\xbd\x80\xbd\x8d\x1d\xc4\xbe\xc3\xe1\x70\x4c\x9c\x05\xce\x15\x17\x84\x8b\xc3\xa5\xe2\x96\xe2\x8a\x70\xbb\x70\xf5\xb8\xb3\xb8\x6e\xdc\x00\x6e\x0c\x8f\xc7\xeb\xe0\x6d\xf0\x9e\xf8\x30\x3c\x0f\x2f\xc5\xe7\xe3\xcb\xf1\x47\xf0\x67\xf0\x3d\xf8\x41\xfc\x07\x02\x99\x60\x48\x70\x22\x04\x10\xe2\x09\x62\xc2\x1a\x42\x29\xe1\x30\xa1\x95\xd0\x43\x18\x22\x4c\x10\x35\x88\x66\x44\x77\x62\x18\x51\xa0\x24\x2e\x21\x16\x13\xab\x89\x2d\xc4\xeb\xc4\x41\xe2\x04\x49\x93\x64\x41\xf2\x24\x45\x91\x52\x49\xab\x49\x65\xa4\x3a\xd2\x05\xd2\x03\xd2\x1b\x32\x99\x6c\x4c\x76\x23\x47\x90\x45\xe4\x55\xe4\x32\xf2\x31\xf2\x25\x72\x3f\x79\x9c\x42\xa3\x58\x53\x38\x94\x04\x8a\x8c\xb2\x89\x72\x90\x72\x96\x72\x97\xf2\x86\x4a\xa5\x9a\x53\xbd\xa9\xf1\x54\x29\x75\x13\xb5\x86\x7a\x9e\xfa\x88\xfa\x41\x8d\xae\x66\xa7\xc6\x55\x13\xa8\xad\x54\xab\x54\x6b\x54\xeb\x51\x7b\xa9\x4e\x54\x37\x53\xf7\x51\x9f\xaf\x9e\xab\x5e\xaa\x7e\x42\xfd\xba\xfa\x73\x0d\xa2\x86\xb9\x06\x47\x83\xa7\xb1\x42\xa3\x52\xe3\xa4\x46\x9f\xc6\x98\x26\x5d\xd3\x51\x33\x4c\x33\x43\xb3\x48\xf3\xb0\xe6\x65\xcd\x61\x1a\x9e\x66\x4e\xf3\xa7\x09\x68\x79\xb4\xfd\xb4\xf3\xb4\x01\x3a\x42\x37\xa1\x73\xe8\x7c\xfa\x5a\x7a\x35\xfd\x02\x7d\x90\x81\x63\x58\x30\xb8\x8c\x54\x46\x21\xe3\x28\xa3\x8b\x31\xaa\x45\xd3\x9a\xa6\x15\xad\xb5\x58\xab\x52\xeb\xb4\x96\x82\x89\x30\xcd\x99\x5c\x66\x3a\xb3\x98\x79\x9c\xd9\xcb\xfc\x38\x49\x7f\x92\xcf\x24\xe1\xa4\x8d\x93\x94\x75\x93\x7a\x26\xbd\xd7\x9e\xac\xed\xad\x2d\xd4\x2e\xd0\xae\xd7\xbe\xad\xfd\x51\x87\xa5\xe3\xaf\x93\xa6\xb3\x45\xa7\x49\xe7\xa1\x2e\x46\xd7\x5a\x37\x42\x57\xae\xbb\x5b\xf7\x82\xee\xf3\xc9\x8c\xc9\x1e\x93\xf9\x93\x0b\x26\x1f\x9f\x7c\x4f\x0f\xd6\xb3\xd6\x8b\xd4\x5b\xaa\xb7\x5f\xaf\x53\x6f\x4c\xdf\x40\x3f\x50\x3f\x4b\xbf\x5c\xff\xbc\xfe\x73\x03\xa6\x81\xb7\x41\xaa\xc1\x36\x83\x56\x83\x11\x43\xba\xe1\x0c\x43\x91\xe1\x36\xc3\x33\x86\x4f\x59\x5a\x2c\x1f\x56\x3a\xab\x8c\xd5\xce\x1a\x35\xd2\x33\x0a\x32\x92\x19\xed\x33\xea\x32\x9a\x30\xb6\x30\x9e\x63\xbc\xc6\xb8\xde\xf8\xa1\x09\xc9\x84\x6d\x92\x64\xb2\xcd\xa4\xcd\x64\xd4\xd4\xd0\x34\xd4\x74\x99\x69\xad\xe9\x3d\x33\xa2\x19\xdb\x2c\xc5\x6c\x87\x59\x87\xd9\x7b\x73\x0b\xf3\x18\xf3\xf5\xe6\x4d\xe6\xc3\x16\xda\x16\x5c\x8b\x5c\x8b\x5a\x8b\x07\x96\x54\x4b\x2f\xcb\x45\x96\x55\x96\xb7\xac\x70\x56\x6c\xab\x34\xab\x5d\x56\x37\xac\x61\x6b\x67\xeb\x14\xeb\x4a\xeb\xeb\x36\xb0\x8d\x8b\x8d\xc8\x66\x97\x4d\xf7\x14\xec\x14\xb7\x29\xe2\x29\x55\x53\xfa\x6c\x29\xb6\x3e\xb6\x39\xb6\xb5\xb6\xfd\x4a\x3b\xa6\x5d\x88\xdd\x1a\xbb\x26\xbb\x97\xf6\xa6\xf6\xf1\xf6\x5b\xec\x3b\xec\xbf\x38\x38\x3b\xa4\x3b\x54\x3b\xdc\x77\xa4\x39\xce\x74\x5c\xe3\xd8\xe2\xf8\xda\xc9\xda\x89\xef\x54\xe9\x74\x6b\x2a\x75\x6a\xc0\xd4\x95\x53\x9b\xa7\xbe\x9a\x66\x33\x4d\x38\x6d\xf7\xb4\x3b\xce\x74\xe7\x50\xe7\xf5\xce\x6d\xce\x9f\x5d\x5c\x5d\x24\x2e\x75\x2e\x23\xae\xa6\xae\x89\xae\x3b\x5d\xfb\xd8\x0c\x76\x38\xbb\x88\x7d\xc9\x0d\xeb\xe6\xeb\xb6\xd2\xed\x94\xdb\xb8\xbb\x8b\xbb\xd4\xfd\xb8\xfb\xef\x1e\xb6\x1e\x69\x1e\x87\x3d\x86\xa7\x5b\x4c\x17\x4e\xaf\x9e\x3e\xe0\x69\xec\xc9\xf3\xdc\xe7\xa9\x98\xc1\x9a\x91\x38\x63\xef\x0c\x85\x97\x91\x17\xcf\xab\xca\xeb\xb1\xb7\x89\xb7\xc0\xfb\x80\xf7\x90\x8f\x95\x4f\xaa\xcf\x11\x9f\x97\xbe\x0e\xbe\x12\xdf\x06\xdf\xf7\x1c\x77\xce\x72\xce\x59\x3f\xc4\x2f\xd0\xaf\xc0\xaf\xcb\x9f\xe6\x3f\xc7\xbf\xc2\xff\x51\x80\x71\x40\x72\x40\x6d\xc0\x68\xa0\x73\xe0\xd2\xc0\xb3\x41\xd8\xa0\xe0\xa0\x2d\x41\x7d\x5c\x7d\x2e\x9f\x5b\xc3\x1d\x9d\xe9\x3a\x73\xf9\xcc\xf6\x60\x4a\xf0\xec\xe0\x8a\xe0\xc7\x21\xd6\x21\x92\x90\x96\x50\x38\x54\x39\x33\x74\x6b\xe8\x83\x59\x66\xb3\xc4\xb3\x9a\xc2\x40\x18\x37\x6c\x6b\xd8\xc3\x70\x8b\xf0\x45\xe1\xbf\x44\xe0\x22\xc2\x23\x2a\x23\x9e\x44\x3a\x46\x2e\x8b\xec\x98\x4d\x9f\xbd\x60\xf6\xe1\xd9\xef\xa2\x7c\xa3\x8a\xa3\xee\xcf\xb1\x9c\x23\x9b\xd3\x16\xad\x1e\x9d\x10\x5d\x13\xfd\x3e\xc6\x2f\xa6\x24\x46\x11\x6b\x1f\xbb\x3c\xf6\x6a\x9c\x6e\x9c\x28\xae\x39\x1e\x1f\x1f\x1d\x7f\x20\x7e\x6c\xae\xff\xdc\xed\x73\x07\x13\x9c\x13\xf2\x13\x7a\xe7\x59\xcc\x5b\x3c\xef\xf2\x7c\xdd\xf9\xe9\xf3\x4f\x2f\x50\x5f\xc0\x5b\x70\x22\x11\x9b\x18\x93\x78\x38\xf1\x13\x2f\x8c\x57\xc5\x1b\x5b\xc8\x5d\xb8\x73\xe1\x28\x9f\xc3\xdf\xc1\x7f\x26\xf0\x16\x6c\x13\x8c\x08\x3d\x85\x25\xc2\xa1\x24\xcf\xa4\x92\xa4\xe1\x64\xcf\xe4\xad\xc9\x23\x29\x5e\x29\xa5\x29\xcf\x45\x1c\x51\x85\xe8\x55\x6a\x50\xea\x9e\xd4\xf7\x69\x61\x69\x07\xd3\x94\xe9\x31\xe9\xf5\x19\x84\x8c\xc4\x8c\x93\x62\x9a\x38\x4d\xdc\x9e\x69\x90\xb9\x38\xb3\x3b\xcb\x26\x2b\x3f\x4b\xb1\xc8\x7d\xd1\xf6\x45\xa3\x92\x60\xc9\x81\x6c\x28\x7b\x5e\x76\xb3\x94\x81\xde\xaa\x3a\x65\x96\xb2\x75\xb2\xfe\x9c\x19\xca\x9c\xca\x9c\x0f\xf2\x68\xf9\x89\xc5\x9a\x8b\xc5\x8b\x3b\x97\x58\x2f\xd9\xb8\x64\x28\x37\x20\xf7\xc7\xa5\x98\xa5\xfc\xa5\x6d\xcb\x8c\x96\xad\x5e\xd6\xbf\xdc\x67\xf9\xbe\x15\xd0\x8a\x85\x2b\xda\x56\x9a\xac\xcc\x5b\x39\xb8\x2a\x70\xd5\xa1\xd5\xa4\xd5\x69\xab\xaf\xad\x71\x58\x53\xb2\xe6\xed\xda\x98\xb5\x2d\x79\xfa\x79\xab\xf2\x06\xd6\x05\xae\xab\xcd\x57\xcb\x97\xe4\xf7\xad\xf7\x58\xbf\x67\x03\x66\x83\x68\x43\xd7\xc6\xa9\x1b\xcb\x37\x7e\x29\x10\x14\x5c\x29\x74\x28\x2c\x2d\xfc\x54\xc4\x2f\xba\xf2\x83\xe3\x0f\x65\x3f\x28\x37\x25\x6d\xea\x2a\x76\x29\xde\xbd\x19\xb7\x59\xbc\xb9\x77\x8b\xd7\x96\x43\x25\x9a\x25\xb9\x25\x03\x5b\x43\xb7\x36\x6e\x63\x6d\x2b\xd8\xf6\x76\xfb\x82\xed\x97\x4b\xa7\x95\xee\xd9\x41\xda\x21\xdb\xa1\x28\x0b\x29\x6b\x2e\x37\x2d\xdf\x5c\xfe\xa9\x22\xa5\xe2\x76\xa5\x6f\x65\xfd\x4e\xbd\x9d\x1b\x77\xbe\xdf\x25\xd8\xd5\xb3\xdb\x7b\x77\xdd\x1e\xfd\x3d\x85\x7b\x3e\xee\x15\xed\xbd\xb3\x2f\x70\x5f\x63\x95\x79\x55\xe9\x7e\xdc\xfe\x9c\xfd\x4f\xaa\xa3\xab\x3b\x7e\x64\xff\x58\x73\x40\xf7\x40\xe1\x81\xcf\x07\xc5\x07\x15\x87\x22\x0f\xb5\xd7\xb8\xd6\xd4\x1c\x56\xea\x1d\x2e\xae\x85\x6b\x65\xb5\x23\x47\x12\x8e\xdc\x38\xea\x77\xb4\xb9\xce\xb6\x6e\x5f\x3d\xb3\xbe\xf0\x18\x38\x26\x3b\xf6\xf4\xa7\xc4\x9f\x7a\x8f\x07\x1f\x6f\x3b\xc1\x3e\x51\xf7\xb3\xd9\xcf\x3b\x1b\xe8\x0d\x05\x8d\x50\xe3\x92\xc6\xd1\xa6\x94\x26\x45\x73\x5c\x73\xf7\xc9\x99\x27\xdb\x5a\x3c\x5a\x1a\x7e\xb1\xfb\xe5\xe0\x29\xa3\x53\x95\xa7\xb5\x4e\x17\xb7\x92\x5a\xf3\x5a\x95\x67\x72\xcf\x8c\x9d\xcd\x3a\xfb\xfc\x5c\xf2\xb9\x81\xb6\x05\x6d\xf7\xcf\xc7\x9e\xbf\xd5\x1e\xd1\xde\x75\x21\xf8\xc2\xa5\x8b\x01\x17\xcf\x77\xf8\x74\x9c\xb9\xe4\x79\xe9\xd4\x65\xf7\xcb\x27\xaf\xb0\xaf\x34\x5d\x75\xb9\xda\xd8\xe9\xdc\xd9\x70\xcd\xf9\x5a\x43\x97\x4b\x57\xe3\x75\xd7\xeb\xcd\x37\xdc\x6e\xb4\x74\x4f\xef\x6e\xed\xf1\xea\x39\x77\xd3\xef\xe6\xc5\x5b\xdc\x5b\x57\x6f\xcf\xba\xdd\xdd\x3b\xa7\xf7\x4e\x5f\x42\x9f\xe2\x8e\xe0\xce\xf0\xdd\xf4\xbb\xaf\xee\xe5\xdc\x9b\xb8\xbf\xea\x01\xf6\x41\xc1\x43\x8d\x87\xa5\x8f\xf4\x1e\x55\xfd\x6a\xf5\x6b\xbd\xc2\x45\x71\xba\xdf\xaf\xbf\xf3\xf1\xec\xc7\xf7\x07\xf8\x03\xcf\x7e\xcb\xfe\xed\xd3\x60\xde\x13\xea\x93\xd2\x21\xc3\xa1\x9a\x61\xa7\xe1\x53\x51\x23\x01\x23\x37\x9e\xce\x7d\x3a\xf8\x2c\xeb\xd9\xc4\xf3\xfc\x17\x9a\x2f\x76\xbe\xb4\x7c\xf9\xf3\xef\xde\xbf\x77\x8e\xc6\x8e\x0e\xbe\x92\xbc\x52\xbe\x2e\x7a\xa3\xf3\xe6\xe0\xdb\x69\x6f\xdb\xc6\xc2\xc7\x1e\xbd\xcb\x78\x37\xf1\xbe\xe0\x83\xce\x87\x43\xe3\xec\xf1\x8e\x8f\x31\x1f\x87\x26\xe4\x9f\xf0\x9f\xca\x3e\x5b\x7d\x6e\xf9\x12\xfc\xe5\x81\x32\x03\xfd\xe0\x50\xdd\xc6\x81\xea\x1b\x04\xc0\xfc\xa2\xe2\x9a\xab\x2f\xea\x57\x85\xac\x9a\x65\x92\x79\x48\x3b\xb9\x55\x64\x58\x66\x24\x5c\x9f\xff\x04\x3a\x6e\xd5\xd7\xba\xe5\xd4\xc9\x86\xf8\x8e\x77\xb9\xbf\xb6\xb4\x9a\x74\x5b\xfb\x19\x08\xa1\x13\xcb\x63\x2d\xf8\x41\x1b\xac\x1b\x57\x30\x7b\x5e\xdf\xa9\xd4\x3d\xba\xa3\xee\x84\xeb\xf9\xd7\x7b\x6b\xd2\xcb\x28\xb8\x97\xbd\xdd\x7b\xd9\xe3\xb4\x79\x81\x06\xd7\x9a\xc7\x3f\x3d\x29\x4f\xdd\xa0\x54\x1f\x46\x2f\x2e\x1e\xff\x13\x00\x00\xff\xff\x05\x75\x8e\xfd\xf6\x0c\x00\x00")

func digits_gif_bytes() ([]byte, error) {
	return bindata_read(
		_digits_gif,
		"digits.gif",
	)
}

func digits_gif() (*asset, error) {
	bytes, err := digits_gif_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "digits.gif", size: 3318, mode: os.FileMode(416), modTime: time.Unix(1422515316, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func _asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"digits.gif": digits_gif,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"digits.gif": &_bintree_t{digits_gif, map[string]*_bintree_t{}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := _asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
